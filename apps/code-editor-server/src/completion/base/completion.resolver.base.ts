/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Completion } from "./Completion";
import { CompletionCountArgs } from "./CompletionCountArgs";
import { CompletionFindManyArgs } from "./CompletionFindManyArgs";
import { CompletionFindUniqueArgs } from "./CompletionFindUniqueArgs";
import { CreateCompletionArgs } from "./CreateCompletionArgs";
import { UpdateCompletionArgs } from "./UpdateCompletionArgs";
import { DeleteCompletionArgs } from "./DeleteCompletionArgs";
import { CodeSnippet } from "../../codeSnippet/base/CodeSnippet";
import { CompletionService } from "../completion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Completion)
export class CompletionResolverBase {
  constructor(
    protected readonly service: CompletionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "any",
  })
  async _completionsMeta(
    @graphql.Args() args: CompletionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Completion])
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "any",
  })
  async completions(
    @graphql.Args() args: CompletionFindManyArgs
  ): Promise<Completion[]> {
    return this.service.completions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Completion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "own",
  })
  async completion(
    @graphql.Args() args: CompletionFindUniqueArgs
  ): Promise<Completion | null> {
    const result = await this.service.completion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Completion)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "create",
    possession: "any",
  })
  async createCompletion(
    @graphql.Args() args: CreateCompletionArgs
  ): Promise<Completion> {
    return await this.service.createCompletion({
      ...args,
      data: {
        ...args.data,

        codeSnippet: args.data.codeSnippet
          ? {
              connect: args.data.codeSnippet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Completion)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "update",
    possession: "any",
  })
  async updateCompletion(
    @graphql.Args() args: UpdateCompletionArgs
  ): Promise<Completion | null> {
    try {
      return await this.service.updateCompletion({
        ...args,
        data: {
          ...args.data,

          codeSnippet: args.data.codeSnippet
            ? {
                connect: args.data.codeSnippet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Completion)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "delete",
    possession: "any",
  })
  async deleteCompletion(
    @graphql.Args() args: DeleteCompletionArgs
  ): Promise<Completion | null> {
    try {
      return await this.service.deleteCompletion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CodeSnippet, {
    nullable: true,
    name: "codeSnippet",
  })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "any",
  })
  async getCodeSnippet(
    @graphql.Parent() parent: Completion
  ): Promise<CodeSnippet | null> {
    const result = await this.service.getCodeSnippet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
