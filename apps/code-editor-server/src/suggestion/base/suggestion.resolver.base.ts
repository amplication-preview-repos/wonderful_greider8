/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Suggestion } from "./Suggestion";
import { SuggestionCountArgs } from "./SuggestionCountArgs";
import { SuggestionFindManyArgs } from "./SuggestionFindManyArgs";
import { SuggestionFindUniqueArgs } from "./SuggestionFindUniqueArgs";
import { CreateSuggestionArgs } from "./CreateSuggestionArgs";
import { UpdateSuggestionArgs } from "./UpdateSuggestionArgs";
import { DeleteSuggestionArgs } from "./DeleteSuggestionArgs";
import { CodeSnippet } from "../../codeSnippet/base/CodeSnippet";
import { SuggestionService } from "../suggestion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Suggestion)
export class SuggestionResolverBase {
  constructor(
    protected readonly service: SuggestionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "read",
    possession: "any",
  })
  async _suggestionsMeta(
    @graphql.Args() args: SuggestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Suggestion])
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "read",
    possession: "any",
  })
  async suggestions(
    @graphql.Args() args: SuggestionFindManyArgs
  ): Promise<Suggestion[]> {
    return this.service.suggestions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Suggestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "read",
    possession: "own",
  })
  async suggestion(
    @graphql.Args() args: SuggestionFindUniqueArgs
  ): Promise<Suggestion | null> {
    const result = await this.service.suggestion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Suggestion)
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "create",
    possession: "any",
  })
  async createSuggestion(
    @graphql.Args() args: CreateSuggestionArgs
  ): Promise<Suggestion> {
    return await this.service.createSuggestion({
      ...args,
      data: {
        ...args.data,

        codeSnippet: args.data.codeSnippet
          ? {
              connect: args.data.codeSnippet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Suggestion)
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "update",
    possession: "any",
  })
  async updateSuggestion(
    @graphql.Args() args: UpdateSuggestionArgs
  ): Promise<Suggestion | null> {
    try {
      return await this.service.updateSuggestion({
        ...args,
        data: {
          ...args.data,

          codeSnippet: args.data.codeSnippet
            ? {
                connect: args.data.codeSnippet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Suggestion)
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "delete",
    possession: "any",
  })
  async deleteSuggestion(
    @graphql.Args() args: DeleteSuggestionArgs
  ): Promise<Suggestion | null> {
    try {
      return await this.service.deleteSuggestion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CodeSnippet, {
    nullable: true,
    name: "codeSnippet",
  })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "any",
  })
  async getCodeSnippet(
    @graphql.Parent() parent: Suggestion
  ): Promise<CodeSnippet | null> {
    const result = await this.service.getCodeSnippet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
