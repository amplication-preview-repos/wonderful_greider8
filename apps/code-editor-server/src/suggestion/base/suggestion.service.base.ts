/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Suggestion as PrismaSuggestion,
  CodeSnippet as PrismaCodeSnippet,
} from "@prisma/client";

export class SuggestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SuggestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.suggestion.count(args);
  }

  async suggestions(
    args: Prisma.SuggestionFindManyArgs
  ): Promise<PrismaSuggestion[]> {
    return this.prisma.suggestion.findMany(args);
  }
  async suggestion(
    args: Prisma.SuggestionFindUniqueArgs
  ): Promise<PrismaSuggestion | null> {
    return this.prisma.suggestion.findUnique(args);
  }
  async createSuggestion(
    args: Prisma.SuggestionCreateArgs
  ): Promise<PrismaSuggestion> {
    return this.prisma.suggestion.create(args);
  }
  async updateSuggestion(
    args: Prisma.SuggestionUpdateArgs
  ): Promise<PrismaSuggestion> {
    return this.prisma.suggestion.update(args);
  }
  async deleteSuggestion(
    args: Prisma.SuggestionDeleteArgs
  ): Promise<PrismaSuggestion> {
    return this.prisma.suggestion.delete(args);
  }

  async getCodeSnippet(parentId: string): Promise<PrismaCodeSnippet | null> {
    return this.prisma.suggestion
      .findUnique({
        where: { id: parentId },
      })
      .codeSnippet();
  }
}
