/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CodeSnippet } from "./CodeSnippet";
import { CodeSnippetCountArgs } from "./CodeSnippetCountArgs";
import { CodeSnippetFindManyArgs } from "./CodeSnippetFindManyArgs";
import { CodeSnippetFindUniqueArgs } from "./CodeSnippetFindUniqueArgs";
import { CreateCodeSnippetArgs } from "./CreateCodeSnippetArgs";
import { UpdateCodeSnippetArgs } from "./UpdateCodeSnippetArgs";
import { DeleteCodeSnippetArgs } from "./DeleteCodeSnippetArgs";
import { CompletionFindManyArgs } from "../../completion/base/CompletionFindManyArgs";
import { Completion } from "../../completion/base/Completion";
import { SuggestionFindManyArgs } from "../../suggestion/base/SuggestionFindManyArgs";
import { Suggestion } from "../../suggestion/base/Suggestion";
import { User } from "../../user/base/User";
import { CodeSnippetService } from "../codeSnippet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CodeSnippet)
export class CodeSnippetResolverBase {
  constructor(
    protected readonly service: CodeSnippetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "any",
  })
  async _codeSnippetsMeta(
    @graphql.Args() args: CodeSnippetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CodeSnippet])
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "any",
  })
  async codeSnippets(
    @graphql.Args() args: CodeSnippetFindManyArgs
  ): Promise<CodeSnippet[]> {
    return this.service.codeSnippets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CodeSnippet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "own",
  })
  async codeSnippet(
    @graphql.Args() args: CodeSnippetFindUniqueArgs
  ): Promise<CodeSnippet | null> {
    const result = await this.service.codeSnippet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CodeSnippet)
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "create",
    possession: "any",
  })
  async createCodeSnippet(
    @graphql.Args() args: CreateCodeSnippetArgs
  ): Promise<CodeSnippet> {
    return await this.service.createCodeSnippet({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CodeSnippet)
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async updateCodeSnippet(
    @graphql.Args() args: UpdateCodeSnippetArgs
  ): Promise<CodeSnippet | null> {
    try {
      return await this.service.updateCodeSnippet({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CodeSnippet)
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "delete",
    possession: "any",
  })
  async deleteCodeSnippet(
    @graphql.Args() args: DeleteCodeSnippetArgs
  ): Promise<CodeSnippet | null> {
    try {
      return await this.service.deleteCodeSnippet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Completion], { name: "completions" })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "any",
  })
  async findCompletions(
    @graphql.Parent() parent: CodeSnippet,
    @graphql.Args() args: CompletionFindManyArgs
  ): Promise<Completion[]> {
    const results = await this.service.findCompletions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Suggestion], { name: "suggestions" })
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "read",
    possession: "any",
  })
  async findSuggestions(
    @graphql.Parent() parent: CodeSnippet,
    @graphql.Args() args: SuggestionFindManyArgs
  ): Promise<Suggestion[]> {
    const results = await this.service.findSuggestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: CodeSnippet): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
