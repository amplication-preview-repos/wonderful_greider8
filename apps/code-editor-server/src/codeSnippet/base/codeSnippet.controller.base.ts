/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CodeSnippetService } from "../codeSnippet.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CodeSnippetCreateInput } from "./CodeSnippetCreateInput";
import { CodeSnippet } from "./CodeSnippet";
import { CodeSnippetFindManyArgs } from "./CodeSnippetFindManyArgs";
import { CodeSnippetWhereUniqueInput } from "./CodeSnippetWhereUniqueInput";
import { CodeSnippetUpdateInput } from "./CodeSnippetUpdateInput";
import { CompletionFindManyArgs } from "../../completion/base/CompletionFindManyArgs";
import { Completion } from "../../completion/base/Completion";
import { CompletionWhereUniqueInput } from "../../completion/base/CompletionWhereUniqueInput";
import { SuggestionFindManyArgs } from "../../suggestion/base/SuggestionFindManyArgs";
import { Suggestion } from "../../suggestion/base/Suggestion";
import { SuggestionWhereUniqueInput } from "../../suggestion/base/SuggestionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CodeSnippetControllerBase {
  constructor(
    protected readonly service: CodeSnippetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CodeSnippet })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCodeSnippet(
    @common.Body() data: CodeSnippetCreateInput
  ): Promise<CodeSnippet> {
    return await this.service.createCodeSnippet({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CodeSnippet] })
  @ApiNestedQuery(CodeSnippetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async codeSnippets(@common.Req() request: Request): Promise<CodeSnippet[]> {
    const args = plainToClass(CodeSnippetFindManyArgs, request.query);
    return this.service.codeSnippets({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CodeSnippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async codeSnippet(
    @common.Param() params: CodeSnippetWhereUniqueInput
  ): Promise<CodeSnippet | null> {
    const result = await this.service.codeSnippet({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        language: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CodeSnippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCodeSnippet(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() data: CodeSnippetUpdateInput
  ): Promise<CodeSnippet | null> {
    try {
      return await this.service.updateCodeSnippet({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          id: true,
          language: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CodeSnippet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCodeSnippet(
    @common.Param() params: CodeSnippetWhereUniqueInput
  ): Promise<CodeSnippet | null> {
    try {
      return await this.service.deleteCodeSnippet({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          language: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/completions")
  @ApiNestedQuery(CompletionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "any",
  })
  async findCompletions(
    @common.Req() request: Request,
    @common.Param() params: CodeSnippetWhereUniqueInput
  ): Promise<Completion[]> {
    const query = plainToClass(CompletionFindManyArgs, request.query);
    const results = await this.service.findCompletions(params.id, {
      ...query,
      select: {
        codeSnippet: {
          select: {
            id: true,
          },
        },

        confidenceScore: true,
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/completions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async connectCompletions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: CompletionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      completions: {
        connect: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/completions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async updateCompletions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: CompletionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      completions: {
        set: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/completions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async disconnectCompletions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: CompletionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      completions: {
        disconnect: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/suggestions")
  @ApiNestedQuery(SuggestionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Suggestion",
    action: "read",
    possession: "any",
  })
  async findSuggestions(
    @common.Req() request: Request,
    @common.Param() params: CodeSnippetWhereUniqueInput
  ): Promise<Suggestion[]> {
    const query = plainToClass(SuggestionFindManyArgs, request.query);
    const results = await this.service.findSuggestions(params.id, {
      ...query,
      select: {
        codeSnippet: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        relevance: true,
        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/suggestions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async connectSuggestions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: SuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestions: {
        connect: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/suggestions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async updateSuggestions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: SuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestions: {
        set: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/suggestions")
  @nestAccessControl.UseRoles({
    resource: "CodeSnippet",
    action: "update",
    possession: "any",
  })
  async disconnectSuggestions(
    @common.Param() params: CodeSnippetWhereUniqueInput,
    @common.Body() body: SuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suggestions: {
        disconnect: body,
      },
    };
    await this.service.updateCodeSnippet({
      where: params,
      data,
      select: { id: true },
    });
  }
}
